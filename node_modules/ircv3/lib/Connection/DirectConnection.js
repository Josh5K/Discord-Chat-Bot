"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Connection_1 = require("./Connection");
const net_1 = require("net");
const tls = require("tls");
class DirectConnection extends Connection_1.default {
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this._connecting = true;
                const connectionErrorListener = (err) => {
                    this._connected = false;
                    this.emit('disconnect', err);
                    if (this._initialConnection) {
                        reject(err);
                    }
                };
                const connectionListener = () => {
                    this._connecting = false;
                    this._connected = true;
                    this.emit('connect');
                    this._initialConnection = false;
                    resolve();
                };
                if (this._secure) {
                    this._socket = tls.connect(this._port || 6697, this._host, {}, connectionListener);
                }
                else {
                    this._socket = new net_1.Socket();
                    this._socket.connect(this._port || 6667, this._host, connectionListener);
                }
                this._socket.on('error', connectionErrorListener);
                this._socket.on('data', (data) => {
                    this.receiveRaw(data.toString());
                });
                this._socket.on('close', (hadError) => {
                    this._socket = undefined;
                    this._connected = false;
                    this._connecting = false;
                    if (!hadError) {
                        this.emit('disconnect');
                    }
                });
            });
        });
    }
    disconnect() {
        if (this._socket) {
            this._manualDisconnect = true;
            this._socket.destroy();
        }
    }
    sendRaw(line) {
        if (this._socket) {
            this._socket.write(line);
        }
    }
}
exports.default = DirectConnection;
//# sourceMappingURL=DirectConnection.js.map