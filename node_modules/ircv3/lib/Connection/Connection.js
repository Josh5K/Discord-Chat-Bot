"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
class Connection extends events_1.EventEmitter {
    constructor({ hostName, port, secure, reconnect = true }) {
        super();
        this._connecting = false;
        this._connected = false;
        this._initialConnection = true;
        this._shouldReconnect = true;
        this._manualDisconnect = false;
        this._currentLine = '';
        this._secure = Boolean(secure);
        if (port) {
            this._host = hostName;
            this._port = port;
        }
        else {
            let splitHost = hostName.split(':');
            if (splitHost.length > 2) {
                throw new Error('malformed hostName');
            }
            let [host, splitPort] = splitHost;
            this._host = host;
            this._port = Number(splitPort);
        }
        this._shouldReconnect = reconnect;
        this.on('disconnect', error => {
            if (this._manualDisconnect) {
                this._manualDisconnect = false;
            }
            else if (error && this._shouldReconnect) {
                this.connect();
            }
        });
    }
    sendLine(line) {
        if (this._connected) {
            line = line.replace(/[\0\r\n]/g, '');
            this.sendRaw(line + '\r\n');
        }
    }
    receiveRaw(data) {
        let receivedLines = data.split('\r\n');
        this._currentLine += receivedLines.shift() || '';
        if (receivedLines.length) {
            this.emit('lineReceived', this._currentLine);
            this._currentLine = receivedLines.pop() || '';
            for (const line of receivedLines) {
                this.emit('lineReceived', line);
            }
        }
    }
    get isConnecting() {
        return this._connecting;
    }
    get isConnected() {
        return this._connected;
    }
}
exports.default = Connection;
//# sourceMappingURL=Connection.js.map