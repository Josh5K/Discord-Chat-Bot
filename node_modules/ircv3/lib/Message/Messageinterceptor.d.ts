import Message, { MessageConstructor } from './Message';
import Client from '../Client';

export declare type MessageInterceptorConditionChecker = (message: Message, interceptor: MessageCollector) => boolean;
export declare type MessageInterceptorEndCallback = (messages: Message[]) => void;
export default class MessageCollector {
	protected _client: Client;
	protected _originalMessage: Message;
	protected _types: Set<MessageConstructor>;
	protected _messages: Message[];
	protected _promise?: Promise<Message[]>;
	protected _promiseResolve?: MessageInterceptorEndCallback;
	protected _endEventHandlers: Map<string, Function>;
	protected _additionalCondition: MessageInterceptorConditionChecker;
	protected _endCondition: MessageInterceptorConditionChecker;

	constructor(_client: Client, _originalMessage: Message, ...types: MessageConstructor[]);

	addType(...types: MessageConstructor[]): void;

	untilType(...types: MessageConstructor[]): this;

	until(condition: MessageInterceptorConditionChecker): this;

	untilEvent(eventType: string): void;

	promise(): Promise<Message[]>;

	intercept(message: Message): boolean;

	end(): void;

	private _isMatchingGenericError(message);

	private _cleanEndEventHandlers();

	private _cleanEndEventHandler(eventType);
}
