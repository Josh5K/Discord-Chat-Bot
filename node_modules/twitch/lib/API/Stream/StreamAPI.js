"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const UserTools_1 = require("../../Toolkit/UserTools");
const Decorators_1 = require("../../Toolkit/Decorators");
const BaseAPI_1 = require("../BaseAPI");
const _1 = require("./");
let StreamAPI = class StreamAPI extends BaseAPI_1.default {
    getStreamByChannel(channel) {
        return __awaiter(this, void 0, void 0, function* () {
            const channelId = UserTools_1.default.getUserId(channel);
            const data = yield this._client.apiCall({ url: `streams/${channelId}` });
            return new _1.default(data, this._client);
        });
    }
    getStreams(channels, game, languageCode, type, page, limit) {
        return __awaiter(this, void 0, void 0, function* () {
            let query = {};
            if (channels) {
                if (typeof channels === 'string') {
                    query.channel = channels;
                }
                else {
                    query.channel = channels.join(',');
                }
            }
            if (game) {
                query.game = game;
            }
            if (languageCode) {
                query.language = languageCode;
            }
            if (type) {
                query.stream_type = type;
            }
            if (page) {
                query.offset = ((page - 1) * (limit || 25)).toString();
            }
            if (limit) {
                query.limit = limit.toString();
            }
            const data = yield this._client.apiCall({ url: 'streams', query });
            return data.streams.map((streamData) => new _1.default(streamData, this._client));
        });
    }
    getAllStreams(page, limit) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getStreams(undefined, undefined, undefined, 'all', page, limit);
        });
    }
    getAllLiveStreams(page, limit) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getStreams(undefined, undefined, undefined, 'live', page, limit);
        });
    }
    getFollowedStreams(type, page, limit) {
        return __awaiter(this, void 0, void 0, function* () {
            let query = {};
            if (type) {
                query.type = type;
            }
            if (page) {
                query.offset = ((page - 1) * (limit || 25)).toString();
            }
            if (limit) {
                query.limit = limit.toString();
            }
            const data = yield this._client.apiCall({ url: 'streams/followed', query, scope: 'user_read' });
            return data.streams.map((streamData) => new _1.default(streamData, this._client));
        });
    }
};
__decorate([
    Decorators_1.Cached(60)
], StreamAPI.prototype, "getStreamByChannel", null);
__decorate([
    Decorators_1.Cached(60)
], StreamAPI.prototype, "getFollowedStreams", null);
StreamAPI = __decorate([
    Decorators_1.Cacheable
], StreamAPI);
exports.default = StreamAPI;
//# sourceMappingURL=StreamAPI.js.map