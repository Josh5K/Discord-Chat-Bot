"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../../Toolkit/Decorators");
const BaseAPI_1 = require("../BaseAPI");
const _1 = require("../Channel/");
const _2 = require("../Stream/");
let SearchAPI = class SearchAPI extends BaseAPI_1.default {
    searchChannels(term, page, limit) {
        return __awaiter(this, void 0, void 0, function* () {
            let query = { query: term };
            if (page) {
                query.offset = ((page - 1) * (limit || 10)).toString();
            }
            if (limit) {
                query.limit = limit.toString();
            }
            const data = yield this._client.apiCall({ url: 'search/channels', query });
            return data.channels.map((channelData) => new _1.default(channelData, this._client));
        });
    }
    searchStreams(term, page, limit, hls) {
        return __awaiter(this, void 0, void 0, function* () {
            let query = { query: term };
            if (page) {
                query.offset = ((page - 1) * (limit || 10)).toString();
            }
            if (limit) {
                query.limit = limit.toString();
            }
            if (hls != null) {
                query.hls = hls.toString();
            }
            const data = yield this._client.apiCall({ url: 'search/streams', query });
            return data.streams.map((streamData) => new _2.default(streamData, this._client));
        });
    }
};
__decorate([
    Decorators_1.Cached(300)
], SearchAPI.prototype, "searchChannels", null);
__decorate([
    Decorators_1.Cached(300)
], SearchAPI.prototype, "searchStreams", null);
SearchAPI = __decorate([
    Decorators_1.Cacheable
], SearchAPI);
exports.default = SearchAPI;
//# sourceMappingURL=SearchAPI.js.map