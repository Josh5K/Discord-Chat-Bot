import BaseAPI from '../BaseAPI';
import PrivilegedUser from './PrivilegedUser';
import User from './';
import { UniformObject } from '../../Toolkit/ObjectTools';
import { UserIdResolvable } from '../../Toolkit/UserTools';
import EmoteSetList from '../Channel/EmoteSetList';
import UserSubscription from './UserSubscription';
import UserFollow from './UserFollow';
import UserBlock from './UserBlock';
export default class UserAPI extends BaseAPI {
    private _userByNameCache;
    getMe(): Promise<PrivilegedUser>;
    getUser(user: UserIdResolvable): Promise<User>;
    getUserByName(userName: string): Promise<User>;
    getUsersByNames(userNames: string[]): Promise<UniformObject<User>>;
    getUserEmotes(user?: UserIdResolvable): Promise<EmoteSetList>;
    getSubscriptionData(user: UserIdResolvable, toChannel: UserIdResolvable): Promise<UserSubscription>;
    getFollowedChannels(user: UserIdResolvable, page?: number, limit?: number, orderBy?: string, orderDirection?: 'asc' | 'desc'): Promise<UserFollow[]>;
    getFollowedChannel(user: UserIdResolvable, channel: UserIdResolvable): Promise<UserFollow>;
    followChannel(user: UserIdResolvable, channel: UserIdResolvable, notifications?: boolean): Promise<UserFollow>;
    unfollowChannel(user: UserIdResolvable, channel: UserIdResolvable): Promise<void>;
    getBlockedUsers(user: UserIdResolvable, page?: number, limit?: number): Promise<UserBlock[]>;
    blockUser(user: UserIdResolvable, userToBlock: UserIdResolvable): Promise<UserFollow>;
    unblockUser(user: UserIdResolvable, userToUnblock: UserIdResolvable): Promise<void>;
    private _cleanUserCache();
}
