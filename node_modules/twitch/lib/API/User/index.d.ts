import Twitch from '../../';
import Channel from '../Channel/';
import ChannelPlaceholder from '../Channel/ChannelPlaceholder';
import { UserIdResolvable } from '../../Toolkit/UserTools';
import UserSubscription from './UserSubscription';
import UserFollow from './UserFollow';
export interface UserData {
    _id: string;
    bio: string;
    created_at: string;
    name: string;
    display_name: string;
    logo: string;
    type: string;
    updated_at: string;
}
export default class User {
    protected _data: UserData;
    protected _client: Twitch;
    constructor(_data: UserData, client: Twitch);
    readonly cacheKey: string;
    readonly id: string;
    readonly userName: string;
    readonly displayName: string;
    readonly logoUrl: string;
    getChannel(): Promise<Channel>;
    getChannelPlaceholder(): ChannelPlaceholder;
    getSubscriptionTo(channel: UserIdResolvable): Promise<UserSubscription>;
    isSubscribedTo(channel: UserIdResolvable): Promise<boolean>;
    getFollows(page?: number, limit?: number, orderBy?: string, orderDirection?: 'asc' | 'desc'): Promise<UserFollow[]>;
    getFollowTo(channel: UserIdResolvable): Promise<UserFollow>;
    follows(channel: UserIdResolvable): Promise<boolean>;
    follow(): Promise<UserFollow>;
    unfollow(): Promise<void>;
}
