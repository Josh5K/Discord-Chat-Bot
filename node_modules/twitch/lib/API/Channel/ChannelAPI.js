"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../../Toolkit/Decorators");
const BaseAPI_1 = require("../BaseAPI");
const _1 = require("./");
const UserTools_1 = require("../../Toolkit/UserTools");
const ChannelSubscription_1 = require("./ChannelSubscription");
const errors_1 = require("request-promise-native/errors");
const NotSubscribed_1 = require("../NotSubscribed");
const NoSubscriptionProgram_1 = require("../NoSubscriptionProgram");
const PrivilegedChannel_1 = require("./PrivilegedChannel");
const _2 = require("../User/");
const ChannelFollow_1 = require("./ChannelFollow");
let ChannelAPI = class ChannelAPI extends BaseAPI_1.default {
    getMyChannel() {
        return __awaiter(this, void 0, void 0, function* () {
            return new PrivilegedChannel_1.default(yield this._client.apiCall({ url: 'channel', scope: 'channel_read' }), this._client);
        });
    }
    getChannel(user) {
        return __awaiter(this, void 0, void 0, function* () {
            return new _1.default(yield this._client.apiCall({ url: `channels/${UserTools_1.default.getUserId(user)}` }), this._client);
        });
    }
    updateChannel(channel, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const channelId = UserTools_1.default.getUserId(channel);
            yield this._client.apiCall({
                url: `channels/${channelId}`,
                method: 'PUT',
                jsonBody: { channel: data },
                scope: 'channel_editor'
            });
        });
    }
    getChannelEditors(channel) {
        return __awaiter(this, void 0, void 0, function* () {
            const channelId = UserTools_1.default.getUserId(channel);
            const data = yield this._client.apiCall({
                url: `channels/${channelId}/editors`,
                scope: 'channel_read'
            });
            return data.users.map((userData) => new _2.default(userData, this._client));
        });
    }
    getChannelFollowers(channel, page, limit, orderDirection) {
        return __awaiter(this, void 0, void 0, function* () {
            const channelId = UserTools_1.default.getUserId(channel);
            let query = {};
            if (page) {
                query.offset = ((page - 1) * (limit || 25)).toString();
            }
            if (limit) {
                query.limit = limit.toString();
            }
            if (orderDirection) {
                query.direction = orderDirection;
            }
            const data = yield this._client.apiCall({
                url: `channels/${channelId}/follows`,
                query
            });
            return data.follows.map((follow) => new ChannelFollow_1.default(follow, this._client));
        });
    }
    getChannelSubscriptions(channel, page, limit, orderDirection) {
        return __awaiter(this, void 0, void 0, function* () {
            const channelId = UserTools_1.default.getUserId(channel);
            let query = {};
            if (page) {
                query.offset = ((page - 1) * (limit || 25)).toString();
            }
            if (limit) {
                query.limit = limit.toString();
            }
            if (orderDirection) {
                query.direction = orderDirection;
            }
            try {
                const data = yield this._client.apiCall({
                    url: `channels/${channelId}/subscriptions`,
                    query,
                    scope: `channel_subscriptions`
                });
                return data.subscriptions.map((sub) => new ChannelSubscription_1.default(sub, this._client));
            }
            catch (e) {
                if (e instanceof errors_1.StatusCodeError && e.statusCode === 422) {
                    throw new NoSubscriptionProgram_1.default(channelId);
                }
                throw e;
            }
        });
    }
    getChannelSubscriptionByUser(channel, byUser) {
        return __awaiter(this, void 0, void 0, function* () {
            const channelId = UserTools_1.default.getUserId(channel);
            const userId = UserTools_1.default.getUserId(byUser);
            try {
                return new ChannelSubscription_1.default(yield this._client.apiCall({
                    url: `channels/${channelId}/subscriptions/${userId}`,
                    scope: 'channel_check_subscription'
                }), this._client);
            }
            catch (e) {
                if (e instanceof errors_1.StatusCodeError) {
                    if (e.statusCode === 404) {
                        throw new NotSubscribed_1.default(channelId, userId);
                    }
                    else if (e.statusCode === 422) {
                        throw new NoSubscriptionProgram_1.default(channelId);
                    }
                }
                throw e;
            }
        });
    }
    startChannelCommercial(channel, length) {
        return __awaiter(this, void 0, void 0, function* () {
            const channelId = UserTools_1.default.getUserId(channel);
            return yield this._client.apiCall({
                url: `channels/${channelId}/commercial`,
                method: 'POST',
                jsonBody: { length },
                scope: 'channel_commercial'
            });
        });
    }
    resetChannelStreamKey(channel) {
        return __awaiter(this, void 0, void 0, function* () {
            const channelId = UserTools_1.default.getUserId(channel);
            return yield this._client.apiCall({
                url: `channels/${channelId}/stream_key`,
                method: 'DELETE',
                scope: 'channel_stream'
            });
        });
    }
};
__decorate([
    Decorators_1.Cached(3600)
], ChannelAPI.prototype, "getMyChannel", null);
__decorate([
    Decorators_1.Cached(3600)
], ChannelAPI.prototype, "getChannel", null);
__decorate([
    Decorators_1.ClearsCache('getChannel', 1)
], ChannelAPI.prototype, "updateChannel", null);
__decorate([
    Decorators_1.Cached(3600)
], ChannelAPI.prototype, "getChannelEditors", null);
__decorate([
    Decorators_1.Cached(30)
], ChannelAPI.prototype, "getChannelFollowers", null);
__decorate([
    Decorators_1.Cached(30)
], ChannelAPI.prototype, "getChannelSubscriptions", null);
__decorate([
    Decorators_1.Cached(3600)
], ChannelAPI.prototype, "getChannelSubscriptionByUser", null);
__decorate([
    Decorators_1.ClearsCache('getMyChannel')
], ChannelAPI.prototype, "resetChannelStreamKey", null);
ChannelAPI = __decorate([
    Decorators_1.Cacheable
], ChannelAPI);
exports.default = ChannelAPI;
//# sourceMappingURL=ChannelAPI.js.map