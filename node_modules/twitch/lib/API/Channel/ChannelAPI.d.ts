import BaseAPI from '../BaseAPI';
import Channel from './';
import { UserIdResolvable } from '../../Toolkit/UserTools';
import ChannelSubscription from './ChannelSubscription';
import PrivilegedChannel from './PrivilegedChannel';
import User from '../User/';
import ChannelFollow from './ChannelFollow';
export interface ChannelUpdateData {
    status?: string;
    game?: string;
    delay?: number;
    channel_feed_enabled?: boolean;
}
export declare type CommercialLength = 30 | 60 | 90 | 120 | 150 | 180;
export default class ChannelAPI extends BaseAPI {
    getMyChannel(): Promise<PrivilegedChannel>;
    getChannel(user: UserIdResolvable): Promise<Channel>;
    updateChannel(channel: UserIdResolvable, data: ChannelUpdateData): Promise<void>;
    getChannelEditors(channel: UserIdResolvable): Promise<User[]>;
    getChannelFollowers(channel: UserIdResolvable, page?: number, limit?: number, orderDirection?: 'asc' | 'desc'): Promise<ChannelFollow[]>;
    getChannelSubscriptions(channel: UserIdResolvable, page?: number, limit?: number, orderDirection?: 'asc' | 'desc'): Promise<ChannelSubscription[]>;
    getChannelSubscriptionByUser(channel: UserIdResolvable, byUser: UserIdResolvable): Promise<ChannelSubscription>;
    startChannelCommercial(channel: UserIdResolvable, length: CommercialLength): Promise<any>;
    resetChannelStreamKey(channel: UserIdResolvable): Promise<any>;
}
