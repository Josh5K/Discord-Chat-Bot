import AuthProvider from './Auth/AuthProvider';
import TokenInfo from './API/TokenInfo';
import { CheermoteBackground, CheermoteScale, CheermoteState } from './API/Bits/CheermoteList';
import { UniformObject } from './Toolkit/ObjectTools';
import StaticAuthProvider from './Auth/StaticAuthProvider';
import BitsAPI from './API/Bits/BitsAPI';
import ChannelAPI from './API/Channel/ChannelAPI';
import SearchAPI from './API/Search/SearchAPI';
import StreamAPI from './API/Stream/StreamAPI';
import UnsupportedAPI from './API/Unsupported/UnsupportedAPI';
import UserAPI from './API/User/UserAPI';
import ChatClient from './Chat/ChatClient';
import AccessToken from './API/AccessToken';
export interface TwitchCheermoteConfig {
    defaultBackground: CheermoteBackground;
    defaultState: CheermoteState;
    defaultScale: CheermoteScale;
}
export interface TwitchConfig {
    authProvider: AuthProvider;
    preAuth: boolean;
    initialScopes: string[];
    cheermotes: TwitchCheermoteConfig;
}
export declare type TwitchApiCallType = 'kraken' | 'custom';
export interface TwitchApiCallOptions {
    url: string;
    type?: TwitchApiCallType;
    method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';
    query?: UniformObject<string>;
    body?: UniformObject<string>;
    jsonBody?: any;
    scope?: string;
    version?: number;
}
export default class Twitch {
    readonly _config: TwitchConfig;
    private _chatClients;
    constructor(config: Partial<TwitchConfig>);
    getTokenInfo(): Promise<TokenInfo>;
    static getTokenInfo(clientId: string, accessToken: string): Promise<TokenInfo>;
    apiCall<T = any>(options: TwitchApiCallOptions): Promise<T>;
    private static _getUrl(url, type?);
    static apiCall<T = any>(options: TwitchApiCallOptions, clientId?: string, accessToken?: string): Promise<T>;
    getChatClient(identifier?: string, debugLevel?: number): Promise<ChatClient>;
    static getAccessToken(clientId: string, clientSecret: string, code: string, redirectUri: string): Promise<AccessToken>;
    static refreshAccessToken(clientId: string, clientSecret: string, refreshToken: string): Promise<AccessToken>;
    readonly bits: BitsAPI;
    readonly channels: ChannelAPI;
    readonly search: SearchAPI;
    readonly streams: StreamAPI;
    readonly users: UserAPI;
    readonly unsupported: UnsupportedAPI;
}
export { AuthProvider, StaticAuthProvider };
export { ChatClient };
