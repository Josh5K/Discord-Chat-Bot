export declare type ObjMap<Obj, T> = {
    [name in keyof Obj]: T;
};
export declare type ObjMapPart<Obj, T> = Partial<ObjMap<Obj, T>>;
export declare type UniformObject<T> = {
    [name: string]: T;
};
export declare type KeyMapper<T> = (value: T) => string;
export default class ObjectTools {
    static map<T, O, Obj = UniformObject<T>>(obj: Obj, fn: (value: T, key: keyof Obj) => O): ObjMap<Obj, O>;
    static fromArray<T, O, Obj>(arr: T[], fn: (value: T) => ObjMapPart<Obj, O>): ObjMap<Obj, O>;
    static indexBy<T>(arr: T[], key: keyof T): UniformObject<T>;
    static indexBy<T>(arr: T[], keyFn: KeyMapper<T>): UniformObject<T>;
    static forEach<T, Obj>(obj: Obj, fn: (value: T, key: keyof Obj) => void): void;
    static entriesToObject<T>(obj: [string, T][]): UniformObject<T>;
}
