"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const defaults = require("defaults");
const request = require("request-promise-native");
const Decorators_1 = require("./Toolkit/Decorators");
const TokenInfo_1 = require("./API/TokenInfo");
const CheermoteList_1 = require("./API/Bits/CheermoteList");
const StaticAuthProvider_1 = require("./Auth/StaticAuthProvider");
exports.StaticAuthProvider = StaticAuthProvider_1.default;
const BitsAPI_1 = require("./API/Bits/BitsAPI");
const ChannelAPI_1 = require("./API/Channel/ChannelAPI");
const SearchAPI_1 = require("./API/Search/SearchAPI");
const StreamAPI_1 = require("./API/Stream/StreamAPI");
const UnsupportedAPI_1 = require("./API/Unsupported/UnsupportedAPI");
const UserAPI_1 = require("./API/User/UserAPI");
const ChatClient_1 = require("./Chat/ChatClient");
exports.ChatClient = ChatClient_1.default;
const AccessToken_1 = require("./API/AccessToken");
let Twitch = Twitch_1 = class Twitch {
    constructor(config) {
        this._chatClients = new Map;
        if (!config.authProvider) {
            throw new Error('No auth provider given');
        }
        this._config = defaults(config, {
            preAuth: false,
            initialScopes: [],
            cheermotes: {
                defaultBackground: CheermoteList_1.CheermoteBackground.dark,
                defaultState: CheermoteList_1.CheermoteState.animated,
                defaultScale: CheermoteList_1.CheermoteScale.x1
            }
        });
        if (this._config.preAuth) {
            // noinspection JSIgnoredPromiseFromCall
            this._config.authProvider.getAccessToken(this._config.initialScopes || []);
        }
    }
    getTokenInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.apiCall({ url: '/' });
            return new TokenInfo_1.default(data.token, this);
        });
    }
    static getTokenInfo(clientId, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.apiCall({ url: '/' }, clientId, accessToken);
            return new TokenInfo_1.default(data.token);
        });
    }
    // tslint:disable-next-line:no-any
    apiCall(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const accessToken = yield this._config.authProvider.getAccessToken(options.scope ? [options.scope] : []);
            return Twitch_1.apiCall(options, this._config.authProvider.clientId, accessToken);
        });
    }
    static _getUrl(url, type) {
        switch (type || 'kraken') {
            case 'kraken':
                return `https://api.twitch.tv/kraken/${url.replace(/^\//, '')}`;
            case 'custom':
                return url;
            default:
                return url; // wat
        }
    }
    // tslint:disable-next-line:no-any
    static apiCall(options, clientId, accessToken) {
        return __awaiter(this, void 0, void 0, function* () {
            let requestOptions = {
                url: this._getUrl(options.url, options.type),
                method: options.method,
                headers: {
                    Accept: `application/vnd.twitchtv.v${options.version || 5}+json`
                },
                qs: options.query,
                form: options.body,
                json: true,
                gzip: true
            };
            if (options.body) {
                requestOptions.form = options.body;
            }
            else if (options.jsonBody) {
                requestOptions.body = options.jsonBody;
            }
            if (clientId) {
                requestOptions.headers['Client-ID'] = clientId;
            }
            if (accessToken) {
                requestOptions.headers.Authorization = `OAuth ${accessToken}`;
            }
            return request(requestOptions);
        });
    }
    getChatClient(identifier = 'default', debugLevel = 0) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._chatClients.has(identifier)) {
                const token = yield this._config.authProvider.getAccessToken(['chat_login']);
                const tokenInfo = yield this.getTokenInfo();
                if (tokenInfo.valid && tokenInfo.userName) {
                    const newClient = new ChatClient_1.default(tokenInfo.userName, token, this, debugLevel);
                    this._chatClients.set(identifier, newClient);
                    return newClient;
                }
                throw new Error('invalid token when trying to connect to chat');
            }
            return this._chatClients.get(identifier);
        });
    }
    static getAccessToken(clientId, clientSecret, code, redirectUri) {
        return __awaiter(this, void 0, void 0, function* () {
            return new AccessToken_1.default(yield this.apiCall({
                url: 'oauth2/token',
                method: 'POST',
                query: {
                    grant_type: 'authorization_code',
                    client_id: clientId,
                    client_secret: clientSecret,
                    code: code,
                    redirect_uri: redirectUri
                }
            }));
        });
    }
    static refreshAccessToken(clientId, clientSecret, refreshToken) {
        return __awaiter(this, void 0, void 0, function* () {
            return new AccessToken_1.default(yield this.apiCall({
                url: 'oauth2/token',
                method: 'POST',
                query: {
                    grant_type: 'refresh_token',
                    client_id: clientId,
                    client_secret: clientSecret,
                    refresh_token: refreshToken
                }
            }));
        });
    }
    get bits() {
        return new BitsAPI_1.default(this);
    }
    get channels() {
        return new ChannelAPI_1.default(this);
    }
    get search() {
        return new SearchAPI_1.default(this);
    }
    get streams() {
        return new StreamAPI_1.default(this);
    }
    get users() {
        return new UserAPI_1.default(this);
    }
    get unsupported() {
        return new UnsupportedAPI_1.default(this);
    }
};
__decorate([
    Decorators_1.Cached(3600)
], Twitch.prototype, "getTokenInfo", null);
__decorate([
    Decorators_1.CachedGetter()
], Twitch.prototype, "bits", null);
__decorate([
    Decorators_1.CachedGetter()
], Twitch.prototype, "channels", null);
__decorate([
    Decorators_1.CachedGetter()
], Twitch.prototype, "search", null);
__decorate([
    Decorators_1.CachedGetter()
], Twitch.prototype, "streams", null);
__decorate([
    Decorators_1.CachedGetter()
], Twitch.prototype, "users", null);
__decorate([
    Decorators_1.CachedGetter()
], Twitch.prototype, "unsupported", null);
Twitch = Twitch_1 = __decorate([
    Decorators_1.Cacheable
], Twitch);
exports.default = Twitch;
var Twitch_1;
//# sourceMappingURL=index.js.map