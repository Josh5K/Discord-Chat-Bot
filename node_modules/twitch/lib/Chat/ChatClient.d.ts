import { Client as IRCClient } from 'ircv3';
import { Listener } from 'typed-event-emitter';
import ChatSubInfo from './ChatSubInfo';
import UserNotice from './Capabilities/TwitchCommands/MessageTypes/UserNotice';
import Whisper from './Capabilities/TwitchCommands/MessageTypes/Whisper';
import Twitch from '../';
import TwitchPrivateMessage from './StandardCommands/PrivateMessage';
export default class ChatClient extends IRCClient {
    private static readonly HOST_MESSAGE_REGEX;
    _twitchClient: Twitch;
    onTimeout: (handler: (channel: string, user: string, reason: string, duration: number) => void) => Listener;
    onBan: (handler: (channel: string, user: string, reason: string) => void) => Listener;
    onChatClear: (handler: (channel: string) => void) => Listener;
    onEmoteOnly: (handler: (channel: string, enabled: boolean) => void) => Listener;
    onFollowersOnly: (handler: (channel: string, enabled: boolean, delay?: number) => void) => Listener;
    onHost: (handler: (channel: string, target: string, viewers?: number) => void) => Listener;
    onHosted: (handler: (channel: string, byChannel: string, auto: boolean, viewers?: number) => void) => Listener;
    onJoin: (handler: (channel: string, user: string) => void) => Listener;
    onPart: (handler: (channel: string, user: string) => void) => Listener;
    onR9k: (handler: (channel: string, enabled: boolean) => void) => Listener;
    onUnhost: (handler: (channel: string) => void) => Listener;
    onSlow: (handler: (channel: string, enabled: boolean, delay?: number) => void) => Listener;
    onSubsOnly: (handler: (channel: string, enabled: boolean) => void) => Listener;
    onSub: (handler: (channel: string, user: string, subInfo: ChatSubInfo, msg: UserNotice) => void) => Listener;
    onResub: (handler: (channel: string, user: string, subInfo: ChatSubInfo, msg: UserNotice) => void) => Listener;
    onWhisper: (handler: (user: string, message: string, msg: Whisper) => void) => Listener;
    onPrivmsg: (handler: (target: string, user: string, message: string, msg: TwitchPrivateMessage) => void) => Listener;
    private _onBanResult;
    private _onTimeoutResult;
    private _onUnbanResult;
    private _onColorResult;
    private _onCommercialResult;
    private _onEmoteOnlyResult;
    private _onEmoteOnlyOffResult;
    private _onFollowersOnlyResult;
    private _onFollowersOnlyOffResult;
    private _onHostResult;
    private _onUnhostResult;
    private _onModResult;
    private _onUnmodResult;
    private _onModsResult;
    private _onJoinResult;
    private _onR9kResult;
    private _onR9kOffResult;
    private _onSlowResult;
    private _onSlowOffResult;
    private _onSubsOnlyResult;
    private _onSubsOnlyOffResult;
    constructor(username: string, token: string, twitchClient: Twitch, debugLevel?: number);
    protected registerCoreMessageTypes(): void;
}
