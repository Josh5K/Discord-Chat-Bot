"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Decorators_1 = require("../Toolkit/Decorators");
class ChatUser {
    constructor(prefix, userData, client) {
        this._userName = prefix.nick.toLowerCase();
        this._client = client;
        this._userData = userData ? new Map(userData) : new Map;
    }
    get userName() {
        return this._userName;
    }
    get displayName() {
        return this._userData.get('display-name') || this._userName;
    }
    get color() {
        // no default here - consumers can figure out their own color decision algorithm if the user didn't set a color
        return this._userData.get('color');
    }
    get badges() {
        const badgesStr = this._userData.get('badges');
        if (!badgesStr) {
            return new Map;
        }
        return new Map(badgesStr.split(',').map(badge => badge.split('/', 2)));
    }
    get userId() {
        return this._userData.get('user-id') || undefined;
    }
    get userType() {
        return this._userData.get('user-type') || undefined;
    }
    get isSubscriber() {
        return Boolean(this._userData.get('subscriber'));
    }
    getUser() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.userId) {
                return this._client._twitchClient.users.getUser(this.userId);
            }
            return this._client._twitchClient.users.getUserByName(this._userName);
        });
    }
}
__decorate([
    Decorators_1.NonEnumerable
], ChatUser.prototype, "_client", void 0);
exports.default = ChatUser;
//# sourceMappingURL=ChatUser.js.map